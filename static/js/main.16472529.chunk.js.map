{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","app/stores/TaskStore.ts","app/stores/AppStore.ts","app/stores/AuthStore.ts","app/stores/TodoStore.ts","app/stores/RootStateContext.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/Login.tsx","features/TodolistsList/TodolistItem.tsx","features/TodolistsList/Todolist/Task/TaskItem.tsx","app/AppAntD.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","rootReducer","combineReducers","tasks","state","action","filter","t","task","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","TaskStore","makeAutoObservable","this","then","resp","items","taskTitle","res","item","console","log","JSON","stringify","domainModel","find","apiModel","deadline","description","priority","startDate","resultCode","AppStore","useRootStore","authStore","setIsLoggedIn","AuthStore","TodoStore","todos","d","RootStateContext","React","createContext","stores","todoStore","taskStore","appStore","RootStateProvider","children","useEffect","fetchTodo","Provider","useContext","AddItemForm","memo","addItem","disabled","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","removeTask","useCallback","deleteTask","onChangeHandler","newIsDoneValue","checked","changeStatus","Completed","New","updateTask","changeTaskTitle","key","className","Checkbox","Delete","Todolist","observer","fetchTasks","addTask","changeFilter","changeTodolistFilter","removeTodolist","deleteTodo","changeTodolistTitle","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","style","border","padding","background","to","paddingTop","Button","TodolistsList","useSelector","addTodolist","addTodo","Grid","container","spacing","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","useDispatch","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","catch","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","TodolistItem","todoId","useParams","todolistsItem","tasksTodolistsItem","maxHeight","display","justifyContent","alignItems","TaskItem","todoTasks","taskItem","maxWidth","Header","Layout","Content","AppAntD","logoutHandler","minHeight","span","Item","exact","path","render","textAlign","position","top","width","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.16472529.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios, {AxiosResponse} from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '82fa877f-d7f6-43f6-aa9e-879e893eebb4'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() : Promise<AxiosResponse<TodolistType[]>> {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some error occurred'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\n\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n// types\r\n\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIED':\r\n            return {...state, isInitialized: action.value}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    // true когда приложение проинициализировалось (проверили юзера, настройки получили и т.д.)\r\n    isInitialized: boolean\r\n}\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-IS-INITIALIED', value} as const)\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me().then(res => {\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true));\r\n        } else {\r\n\r\n        }\r\n        dispatch(setAppInitializedAC(true));\r\n    })\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id != action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            const action = removeTaskAC(taskId, todolistId)\r\n            dispatch(action)\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                const action = addTaskAC(task)\r\n                dispatch(action)\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerAppError(res.data, dispatch);\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\r\n                    dispatch(action)\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id != action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\r\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\r\n        dispatch(setAppStatusAC('loading'))\r\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                //скажем глобально приложению, что асинхронная операция завершена\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC(res.data.data.item))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC(id, title))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import {makeAutoObservable} from \"mobx\";\r\nimport {\r\n    TaskPriorities,\r\n    TaskStatuses,\r\n    TaskType,\r\n    todolistsAPI,\r\n    UpdateTaskModelType\r\n} from \"../../api/todolists-api\";\r\n\r\n\r\n// types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n\r\nclass TaskStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    initialState = {\r\n        tasks: {} as TasksStateType\r\n    }\r\n\r\n    async fetchTasks(todolistId: string) {\r\n        await todolistsAPI.getTasks(todolistId)\r\n            .then(resp=>{\r\n                this.initialState.tasks = {...this.initialState.tasks, [todolistId]: resp.data.items}\r\n            })\r\n    }\r\n\r\n    async addTask(taskTitle: string, todolistId: string) {\r\n        const res = await todolistsAPI.createTask(todolistId, taskTitle)\r\n        const task: TaskType = res.data.data.item\r\n        console.log('task', JSON.stringify(task))\r\n        this.initialState.tasks = {\r\n            ...this.initialState.tasks,\r\n            [todolistId]: [task, ...this.initialState.tasks[task.todoListId]]\r\n        }\r\n    }\r\n\r\n    async deleteTask(taskId: string, todolistId: string) {\r\n        const res = await todolistsAPI.deleteTask(todolistId, taskId)\r\n        this.initialState.tasks = {\r\n            ...this.initialState.tasks,\r\n            [todolistId]: this.initialState.tasks[todolistId].filter(t => t.id !== taskId)\r\n        }\r\n        console.log('render')\r\n    }\r\n    async updateTask(taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) {\r\n        const task =  this.initialState.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                deadline: task.deadline,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                title: task.title,\r\n                status: task.status,\r\n                ...domainModel\r\n            }\r\n\r\n        try {\r\n            const res = await todolistsAPI.updateTask(todolistId,taskId,apiModel)\r\n            if (res.data.resultCode === 0) {\r\n\r\n               this.initialState.tasks =  {\r\n                ...this.initialState.tasks,\r\n                    [todolistId]: this.initialState.tasks[todolistId]\r\n                    .map(t => t.id === taskId ? {...t, ...domainModel} : t)\r\n                }\r\n            }\r\n        } catch (e) {\r\n\r\n        } finally {\r\n\r\n        }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// const StoreContext = createContext<Tasks>(new Tasks());\r\n//\r\n//\r\n// const StoreProvider: FC<{ store: Tasks }> = ({children, store}) => (\r\n//     <StoreContext.Provider value={store}> {children} </StoreContext.Provider>\r\n// );\r\n//\r\n// const useTaskStore = () => {\r\n//     return useContext(StoreContext);\r\n// }\r\n// export {Tasks, StoreProvider, useTaskStore};\r\nexport default TaskStore;","import {makeAutoObservable} from \"mobx\";\r\nimport {authAPI} from \"../../api/todolists-api\";\r\nimport {useRootStore} from \"./RootStateContext\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\nclass AppStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n\r\n    initialState: InitialStateType = {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    }\r\n\r\n\r\n    setAppStatus(status: RequestStatusType) {\r\n        this.initialState.status = status;\r\n    }\r\n\r\n    setAppError(error: string | null) {\r\n        this.initialState.error = error;\r\n    }\r\n\r\n    async initializeApp() {\r\n        try {\r\n            const res = await authAPI.me()\r\n            if (res.data.resultCode === 0) {\r\n                this.initialState.isInitialized = true;\r\n            }\r\n            const {authStore} = useRootStore()\r\n            authStore.setIsLoggedIn(true)\r\n        } catch (e) {\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// const StoreContext = createContext<Appmobx>(new Appmobx());\r\n//\r\n//\r\n// const StoreProvider: FC<{ store: Appmobx }> = ({children, store}) => (\r\n//     <StoreContext.Provider value={store}> {children} </StoreContext.Provider>\r\n// );\r\n//\r\n// const useAppmobxStore = () => {\r\n//     return useContext(StoreContext);\r\n// }\r\n// export {Appmobx, StoreProvider, useAppmobxStore};\r\n export default AppStore","import {makeAutoObservable} from \"mobx\";\r\nimport {authAPI, LoginParamsType} from \"../../api/todolists-api\";\r\n\r\n\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\nclass AuthStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    initialState: InitialStateType = {\r\n        isLoggedIn: false\r\n    }\r\n\r\n    setIsLoggedIn(value: boolean){\r\n    this.initialState = {...this.initialState,isLoggedIn:value}\r\n\r\n    }\r\n\r\n    async login(data: LoginParamsType) {\r\n        try {\r\n            const res = await authAPI.login(data)\r\n            if (res.data.resultCode === 0) {\r\n                this.setIsLoggedIn(true)\r\n            }\r\n        } catch (e) {\r\n        } finally {\r\n        }\r\n    }\r\n\r\n    async loginOut() {\r\n        try {\r\n            const res = await authAPI.logout()\r\n            if (res.data.resultCode === 0) {\r\n                this.setIsLoggedIn(false)\r\n            }\r\n        } catch (e) {\r\n        } finally {\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// const StoreContext = createContext<Auth>(new Auth());\r\n//\r\n//\r\n// const StoreProvider: FC<{ store: Auth }> = ({children, store}) => (\r\n//     <StoreContext.Provider value={store}> {children} </StoreContext.Provider>\r\n// );\r\n//\r\n// const useAuthStore = () => {\r\n//     return useContext(StoreContext);\r\n// }\r\n// export {Auth, StoreProvider, useAuthStore};\r\nexport default AuthStore;","import {makeAutoObservable} from \"mobx\";\r\nimport {todolistsAPI, TodolistType} from \"../../api/todolists-api\";\r\nimport {RequestStatusType} from \"../app-reducer\";\r\nimport { FilterValuesType} from \"../../features/TodolistsList/todolists-reducer\";\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n\r\nclass TodoStore {\r\n\r\n    constructor() {\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n    initialState = {todos: [] as TodolistDomainType[]}\r\n\r\n\r\n    async fetchTodo() {\r\n        const res = await todolistsAPI.getTodolists()\r\n\r\n\r\n        if (res.data && res.data.length > 0) {\r\n            this.initialState.todos = res.data.map(d => ({...d, filter: 'all', entityStatus: 'idle'}))\r\n            // this.initialState.todos.forEach(tl=>taskStore.fetchTasks(tl.id))\r\n        }\r\n    }\r\n\r\n\r\n    async addTodo(title: string) {\r\n        try {\r\n            const res = await todolistsAPI.createTodolist(title)\r\n            this.initialState.todos = [...this.initialState.todos, {\r\n                ...res.data.data.item,\r\n                filter: 'all',\r\n                entityStatus: 'idle'\r\n            }]\r\n        } catch (e) {\r\n\r\n        } finally {\r\n\r\n        }\r\n    }\r\n\r\n    async deleteTodo(id: string) {\r\n        await todolistsAPI.deleteTodolist(id)\r\n        this.initialState.todos = this.initialState.todos.filter(tl => tl.id != id)\r\n    }\r\n\r\n    changeTodolistFilter(id: string, filter: FilterValuesType) {\r\n        this.initialState.todos = this.initialState.todos.map(tl => tl.id === id ? {...tl, filter: filter} : tl)\r\n    }\r\n\r\n    async changeTodolistTitle(id: string, title: string) {\r\n        await todolistsAPI.updateTodolist(id, title)\r\n        this.initialState.todos = this.initialState.todos.map(tl => tl.id === id ? {...tl, title} : tl)\r\n    }\r\n\r\n}\r\n\r\n// const StoreContext = createContext<Todo>(new Todo());\r\n//\r\n//\r\n// const StoreProvider: FC<{ store: Todo }> = ({children, store}) => (\r\n//     <StoreContext.Provider value={store}> {children} </StoreContext.Provider>\r\n// );\r\n//\r\n// const useTodosStore = () => {\r\n//     return useContext(StoreContext);\r\n// }\r\n// export {Todo, StoreProvider, useTodosStore};\r\nexport default TodoStore;","import React, {useEffect} from 'react'\r\nimport TaskStore from \"./TaskStore\";\r\nimport AppStore from \"./AppStore\";\r\nimport AuthStore from \"./AuthStore\";\r\nimport TodoStore from \"./TodoStore\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\n\r\ntype TRootStateContext = {\r\n    todoStore: TodoStore\r\n    taskStore: TaskStore\r\n    appStore: AppStore\r\n    authStore: AuthStore\r\n}\r\nconst RootStateContext = React.createContext<TRootStateContext>(\r\n    {} as TRootStateContext\r\n)\r\nexport const stores = {\r\n    todoStore: new TodoStore(),\r\n    taskStore: new TaskStore(),\r\n    appStore: new AppStore(),\r\n    authStore: new AuthStore(),\r\n}\r\n\r\n\r\n\r\nexport const RootStateProvider: React.FC<React.PropsWithChildren<{}>> = ({children}) => {\r\n    useEffect( () => {\r\n        stores.todoStore.fetchTodo()\r\n    }, [stores.todoStore])\r\n    return (\r\n        <RootStateContext.Provider value={stores}>\r\n            {children}\r\n        </RootStateContext.Provider>\r\n    )\r\n}\r\n\r\nexport const useRootStore = () => React.useContext(RootStateContext)","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\nimport {useRootStore} from \"../../../../app/stores/RootStateContext\";\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const {taskStore} = useRootStore()\r\n    // const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        taskStore.deleteTask(id,todolistId)\r\n    }, [taskStore])\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id,props.todolistId])\r\n\r\n\r\n    const changeStatus = (id: string, status: TaskStatuses, todolistId: string)=> {\r\n        taskStore.updateTask(id, {status},todolistId)\r\n    }\r\n\r\n    // const onTitleChangeHandler = useCallback((newValue: string) => {\r\n    //     props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    // }, [props.task.id, props.todolistId]);\r\n\r\n\r\n    const changeTaskTitle = useCallback( (id: string, title: string, todolistId: string)=> {\r\n        taskStore.updateTask(id, {title},todolistId)\r\n    }, [taskStore])\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={()=>changeTaskTitle(props.task.id,props.task.title,props.todolistId)}/>\r\n        <IconButton onClick={()=>removeTask(props.task.id, props.todolistId)}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button,IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport { Link } from 'react-router-dom'\r\nimport {observer} from \"mobx-react\";\r\nimport {useRootStore} from \"../../../app/stores/RootStateContext\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n}\r\n\r\nexport const Todolist = observer((props:PropsType) => {\r\n    const {todoStore} = useRootStore()\r\n    const {taskStore} = useRootStore()\r\n\r\n    useEffect(() => {\r\n        taskStore.fetchTasks(props.todolist.id)\r\n    }, [taskStore, props.todolist.id])\r\n\r\n    const addTask = useCallback(function (title: string) {\r\n        taskStore.addTask(title,props.todolist.id)\r\n    }, [taskStore,props.todolist.id])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        todoStore.changeTodolistFilter(todolistId,value)\r\n    }, [todoStore])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        todoStore.deleteTodo(id)\r\n    }, [todoStore])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        todoStore.changeTodolistTitle(id,title)\r\n    }, [todoStore])\r\n\r\n\r\n    const onAllClickHandler = useCallback(() => changeFilter('all', props.todolist.id), [props.todolist.id, changeFilter])\r\n    const onActiveClickHandler = useCallback(() => changeFilter('active', props.todolist.id), [props.todolist.id, changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => changeFilter('completed', props.todolist.id), [props.todolist.id, changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div  style={{border:'1px solid black',padding:'10px', background:\"white\"}}>\r\n        <h3><EditableSpan  value={props.todolist.title} onChange={()=>changeTodolistTitle(props.todolist.id,props.todolist.title)}/>\r\n            <IconButton onClick={()=>removeTodolist(props.todolist.id)} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist?.map(t =>{\r\n\r\n                   // return <Link to={`taskItem/${props.todolist.id}`}>\r\n                   // @ts-ignore\r\n                    return <Link to={`/todolistItem/${props.todolist.id}/taskItem/${t.id}`}>\r\n\r\n                    <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                        // removeTask={props.removeTask}\r\n                        // changeTaskTitle={props.changeTaskTitle}\r\n                        // changeTaskStatus={props.changeTaskStatus}\r\n                    />\r\n                   </Link>\r\n\r\n                })\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {observer} from \"mobx-react\";\r\nimport {useRootStore} from \"../../app/stores/RootStateContext\";\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const TodolistsList = observer(() => {\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const {todoStore} = useRootStore()\r\n    const {taskStore} = useRootStore()\r\n    const todolists = todoStore.initialState.todos\r\n    const tasks = taskStore.initialState.tasks\r\n    // const isLoggedIn = authStore.initialState.isLoggedIn\r\n\r\n    // useEffect( () => {\r\n    //     todoStore.fetchTodo()\r\n    // }, [todoStore])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        todoStore.addTodo(title)\r\n    }, [todoStore])\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n    return <div>\r\n\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n                    const onClickRedirectToTodo = () => {\r\n                        return <Redirect to={'todolistItem/:id'} />\r\n                    }\r\n\r\n                    return <Grid item key={tl.id} >\r\n                        <Paper style={{padding: '10px'}} onClick={onClickRedirectToTodo}>\r\n\r\n                            <Link to={`todolistItem/${tl.id}`}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                            />\r\n\r\n                            </Link>\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n\r\n    </div>\r\n})\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useEffect} from 'react';\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {useRootStore} from \"../../app/stores/RootStateContext\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst TodolistItem = observer(() => {\r\n    const {todoId} = useParams<{todoId:string}>()//{id: 'dwakojiefuorifjoetib'}\r\n    const {todoStore} = useRootStore()\r\n    const {taskStore} = useRootStore()\r\n\r\n    useEffect( () => {\r\n        taskStore.fetchTasks(todoId)\r\n    }, [taskStore, todoId])\r\n\r\n    const todolists = todoStore.initialState.todos\r\n    const tasks = taskStore.initialState.tasks\r\n    const todolistsItem = todolists?.find(t=> t.id === todoId)\r\n    const tasksTodolistsItem = tasks[todoId]\r\n    console.log(todolistsItem)\r\n    console.log(tasks)\r\n    return (\r\n        <div style={{maxHeight:'100vh',display:'flex', justifyContent:\"center\",alignItems:'center'}}>\r\n            {\r\n                todolistsItem && tasksTodolistsItem\r\n                ? <Todolist todolist={todolistsItem} tasks={tasksTodolistsItem}/>\r\n                    :  <Redirect to={\"/\"} />\r\n            }\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default TodolistItem;","import React, {useEffect} from 'react';\r\nimport {Task} from \"./Task\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {useRootStore} from \"../../../../app/stores/RootStateContext\";\r\nimport {observer} from \"mobx-react\";\r\n\r\nconst TaskItem = observer(() => {\r\n\r\n    const {taskId, todoId} = useParams<{taskId:string,todoId:string}>()//{id: 'kjh'}\r\n    const {taskStore} = useRootStore()\r\n\r\n    useEffect( () => {\r\n        taskStore.fetchTasks(todoId)\r\n    }, [taskStore])\r\n\r\n    const tasks = taskStore.initialState.tasks\r\n\r\n    const todoTasks = tasks[todoId]\r\n\r\n    const taskItem = todoTasks?.find(task => task.id === taskId)\r\n\r\n\r\n    return (\r\n        <div style={{border:'1px solid black',padding:'10px', background:\"white\",maxWidth:'max-content'}}>\r\n            {\r\n                taskItem\r\n                    ?   <Task task={taskItem} todolistId={todoId}/>\r\n                    :  <Redirect to={`/todolistItem/:${todoId}`} />\r\n            }\r\n                </div>\r\n    );\r\n});\r\n\r\nexport default TaskItem;","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport {BrowserRouter, Redirect, Route, useHistory} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\nimport TodolistItem from \"../features/TodolistsList/TodolistItem\";\r\nimport TaskItem from \"../features/TodolistsList/Todolist/Task/TaskItem\";\r\nimport {observer} from \"mobx-react\";\r\nimport { Link } from 'react-router-dom'\r\nimport {Breadcrumb, Button, Col, Layout, Menu, Row} from 'antd';\r\nimport {Footer} from 'antd/lib/layout/layout'\r\nimport 'antd/dist/antd.css';\r\n\r\nconst {Header, Content} = Layout;\r\n\r\n\r\n\r\nconst AppAntD = observer(() => {\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [dispatch])\r\n\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            {/*<CircularProgress/>*/}\r\n        </div>\r\n    }\r\n\r\n    return (<div  style={{minHeight:'100vh',display:'flex', justifyContent:\"center\",alignItems:'center'}}>\r\n            <Layout className=\"layout\">\r\n                <Header>\r\n                    <div className=\"logo\" />\r\n                    <Row>\r\n                        <Col span={20}>\r\n                            <Link to={'/'} style={{color:'white', margin:'0 20px'}}>Home</Link>\r\n\r\n                        </Col>\r\n                        <Col span={4}>\r\n                            {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                        </Col>\r\n                    </Row>\r\n\r\n                </Header>\r\n                <Breadcrumb style={{ margin: '16px 16px' }} >\r\n                    <Breadcrumb.Item><Link to={'/todolistItem/:todoId/taskItem/:taskId'} >Task</Link></Breadcrumb.Item>\r\n                    <Breadcrumb.Item><Link to={'/todolistItem/:todoId'} >Todolist</Link></Breadcrumb.Item>\r\n                    <Breadcrumb.Item><Link to={''} >Home</Link></Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <Content style={{padding: '0 50px',minHeight:'80vh'}}>\r\n                    <div className=\"site-layout-content\">\r\n\r\n                            <div className=\"App\">\r\n                                <ErrorSnackbar/>\r\n                                <Route exact path={'/'} render={() => <TodolistsList/>}/>\r\n                                <Route path={'/login'} render={() => <Login/>}/>\r\n                                <Route exact path={'/todolistItem/:todoId'} render={() => <TodolistItem/>}/>\r\n                                <Route exact path={'/todolistItem/:todoId/taskItem/:taskId'}\r\n                                       render={() => <TaskItem/>}/>\r\n                            </div>\r\n                    </div>\r\n                </Content>\r\n                <Footer\r\n                    style={{textAlign: 'center',}}>\r\n                    Ant Design ©2018 Created by Ant UED\r\n                </Footer>\r\n            </Layout>\r\n        </div>\r\n    )\r\n});\r\n\r\nexport default AppAntD\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {store} from './app/store';\r\nimport {Provider} from 'react-redux';\r\nimport {RootStateProvider} from \"./app/stores/RootStateContext\";\r\nimport AppAntD from \"./app/AppAntD\";\r\nimport {HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <HashRouter>\r\n    <Provider store={store}>\r\n    <RootStateProvider>\r\n        <AppAntD/>\r\n    </RootStateProvider>\r\n</Provider>\r\n    </HashRouter>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}